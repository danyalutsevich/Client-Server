Клиент - серверное программирование

Сеть (компьютерная сеть, NETWORK,! не путать с GRID);

- совокупность узлов и каналов связи

Узел (Node, Peer) - часть сети, устройство способное выполнять прогрраммы/команды (активное устройство)

Адресс узла - данные позволяющие однозначно определить (локализировать) узел в сети


IP, IP - adress - числовой адресс, 32 бита (v4) / 128 бита (v6).
Для упрощения применяются символьные записи	IP, например 127.0.0.1 или ::1

Некоторые IP имеют специальное назначение:
127.0.0.1 "петля", ссылка обратной связи (ссылка на себя)


На одном сетевом узле могут выполняться несколько программ, требующих
данных из сети (Браузер, почта, обновления и тд) Для их разделения,
для адресации данных конкретному приложению, вводится понятие порта.
Порт (сетевой порт) - число, идентифицирующее приложение на yзeл


Полный адрес приложения состоит из IP и порта и называется endpoint
записывается через : "127.0.0.1:80"
Некоторыее порты закреплены за некоторыми приложениями
Не рекомендуется их использовать для своих целей


Клиент - роль приложения - узел посылающий запрос
инициатор коммуникации	

Сервер - роль - отвечающий на запрос 

Одно и тоже приложение модет играть любую из ролей, менять роли по ходу 
работы и даже играть обе роли одновременно (запрашивать один сервер и отвечать другому клиенту)

Сокет - термин скрывающий за собой технологию обмена данными между сетевыми узлами

Термины записать в сокет , прочитать из сокета означают процессы обмена данными между приложениями
установившими связь - "открывшими" сокеты с обеих сторон сети

Сокеты бывают односторонними (чтение либо запись) и двухсторонними (дуплексными)

Основное поведение:

Сервер - слушает порт: регистрируется в операцонной системе занимая за собой некоторый порт
ОС получив сетевую активность с указаниями этого порта, передает данные серверу.

Клиент соединяется (инициирует соединение) посылает специальный запрос на endpoint на
котором должен быть сервер если он там есть то соединение устанавливается и открывается сокет

Технические детали:

Сервер должен знать к какому endpointУ подключаться 
Клиент тоже самое только для подключения.
 
Так как это разные приложения нужно включить элементы выбора IP:port в каждом из них


---Endpoint---
IP:______
Port:_____


В ОС Windows за работу с сетевыми сокетами отвечает модуль 
WSA (WinSocket API), со временем изветсен как WinSocket 

Для работы с WSA необходимо дополнительно заявлять об этом,
подключая библиотеку Ws2_32.lib

#pragma comment (lib,"Ws2_32.lib")

#include <WinSock2.h>
#include <WS2tcpip.h>

(до подключения <Windows.h>)



При работе серверного приложения присутствуют два сокета
"слушающий" сокет - постоянно работающий сокет, отвечающий за прием
подключений
"обменный"


При анализе ошибок не рекомендуется несколько раз вызывать 
WSAGetLastError()
кроме повышенной трудоемкости (за счет повторных вызовов)
возможен "сброс" ошибки - сам вызов WSAGetLastError() завершается 
успешно то есть нет ошибки;


